# coding: utf-8
import random
import math
import json

import conf
from db import MongoWeb
from utils import cmd


class Center(object):
	
	def __init__(self, vector):
		self.vector = vector
		self.objects = []


class Vector(object):

	def __init__(self, words, title=''):
		self.title = title
		self.words = words

	def add_to_nearest_center(self, centers):
		distances = dict((c, self.distance(c.vector)) for c in centers)
		nearest = min(distances.iteritems(), key=lambda x: x[1])[0]
		nearest.objects.append(self)

	def distance(self, vector):
		square_sum = 0.0
		for word in vector.words:
			if word not in self.words:
				a = vector.words[word]
				square_sum += math.pow(a, 2)
			else:
				a,b = vector.words[word],self.words[word]
				square_sum += math.pow((a-b), 2)
		for word in self.words:
			if word not in vector.words:
				a = self.words[word]
				square_sum += math.pow(a, 2)
		result = math.sqrt(square_sum)
		return result


class KMeans(object):

	def __init__(self, mongo_web):
		self.mongo = MongoWeb(mongo_web)
		self.article = self.mongo.article
		self.index = self.mongo.index
		self.word_dict = {}
		self.vectors = []
		self.centers = []
		self.last_cost = 0.0
		self.load_index()

	def load_index(self):
		doc = {'pub_time':{'$gt':'2014-07-10 08:00:00', '$lt':'2014-07-10 09:00:00'}}
		for article in self.article.find(doc):
			index = self.index.find_one({'_id':article['_id']})
			words = {}
			for w in json.loads(index['index'])[:10]:
				if w[0] not in self.word_dict:
					self.word_dict[w[0]] = len(self.word_dict)
				words[self.word_dict[w[0]]] = 1
			vector = Vector(words, article['title'])
			self.vectors.append(vector)

	def start(self, class_num):
		for vector in random.sample(self.vectors, class_num):
			c = Center(vector)
			self.centers.append(c)

		self.split()
		self.locate_center()
		self.last_cost = self.cost()

		i = 0
		while True:
			i += 1
			print '第 ',i,' 次优化:'
			self.split()
			self.locate_center()
			curr_cost = self.cost()
			print '损失降低(上一次 - 当前)：',self.last_cost,' - ',curr_cost,' = ',(self.last_cost - curr_cost)
			if self.last_cost - curr_cost <= 1:
				break
			else:
				self.last_cost = curr_cost

		for id, center in enumerate(self.centers):
			print 'class %d: %d' % (id, len(center.objects))
			for obj in center.objects[:5]:
				print ' ' * 4, obj.title

	def split(self):
		print '划分对象... Objects : ', len(self.vectors)
		for center in self.centers:
			center.objects = []

		for vector in self.vectors:
			vector.add_to_nearest_center(self.centers)

	def locate_center(self):
		count = 0
		for center in self.centers:
			count += 1
			print '计算第 ', count, ' 类的新中心点...'
			files_count = float(len(center.objects))
			new_center = {}
			for vector in center.objects:
				for word in vector.words:
					if word not in new_center:
						new_center[word] = 1
					else:
						new_center[word] += 1
				for word in new_center:
					new_center[word] = new_center[word] / files_count

				center.vector = Vector(new_center)

	def cost(self):
		print '开始计算损失函数'
		total_cost = 0.0
		count = 0
		for center in self.centers:
			count += 1
			print '计算第 ', count, ' 类的损失 objects : ', len(center.objects)
			for vector in center.objects:
				total_cost += math.pow(vector.distance(center.vector),2)
		print '本轮损失为：',total_cost
		return total_cost


@cmd()
def kmeans():
	k = KMeans(conf.mongo_web)
	k.start(10)
